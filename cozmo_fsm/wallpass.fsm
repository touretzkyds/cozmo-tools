from cozmo.util import Pose
from cv2 import Rodrigues
from numpy import matrix

from .nodes import *
from .transitions import *
from .transform import wrap_angle
from .pilot import PilotToPose, PilotCheckStart

from math import sin, cos, atan2, pi, sqrt

class GoToDoor(StateNode):

    def __init__(self, wall=None, door_id = 0):
        self.object = wall
        self.wall_name = 'Wall-'+str(wall)
        self.door_id = door_id
        super().__init__()
        if self.wall_name in self.robot.world.world_map.objects:
            self.wobj = self.robot.world.world_map.objects[self.wall_name]
            print("Choosing Robot view")
        else:
            self.wobj = self.robot.world.world_map.objects["GhostWall"+str(wall)]
            print("Choosing Ghost")

        self.door_coordinates = self.wobj.markers[door_id][1]

        print(self.door_coordinates)

    def pick_side(self, dist):
        wall = self.object
        door_coordinates = self.door_coordinates
        x = self.wobj.x
        y = self.wobj.y
        ang = self.wobj.theta
        rx = self.robot.world.particle_filter.pose[0]
        ry = self.robot.world.particle_filter.pose[1]

        side1 = (x + cos(ang)*dist - sin(ang)*(self.wobj.length/2 - door_coordinates[0]), y + sin(ang)*dist + cos(ang)*( self.wobj.length/2 - door_coordinates[0]), ang + pi)
        side2 = (x - cos(ang)*dist - sin(ang)*(self.wobj.length/2 - door_coordinates[0]), y - sin(ang)*dist + cos(ang)*( self.wobj.length/2 - door_coordinates[0]), ang)
        sides = [side1, side2]
        sorted_sides = sorted(sides, key=lambda pt: (pt[0]-rx)**2 + (pt[1]-ry)**2)

        return sorted_sides[0]

    class TurnToSide(Turn):
        def __init__(self):
            super().__init__()

        def start(self, event=None):
            wall = self.parent.object
            wobj = self.parent.wobj
            dtheta = (wobj.theta - self.robot.world.particle_filter.pose_estimate()[2])
            if abs(dtheta) > 0.1:
                self.angle = Angle(dtheta)
                super().start(event)
            else:
                self.angle = Angle(0)
                super().start(event)
                self.post_success()


    class GoToSide(PilotToPose):
        def __init__(self):
            super().__init__(None)

        def start(self, event=None):
            wall = self.parent.object
            print('Selected wall',self.parent.wobj)
            (x, y, theta) = self.parent.pick_side(200)

            self.target_pose = Pose(x, y, self.robot.pose.position.z,
                                    angle_z=Angle(radians = wrap_angle(theta)))
            print('Traveling to',self.target_pose)
            super().start(event)


    class ReportPosition(StateNode):
        def start(self,event=None):
            super().start(event)
            wall = self.parent.object
            wobj = self.parent.wobj
            cx = wobj.x
            cy = wobj.y
            rx = self.robot.pose.position.x
            ry = self.robot.pose.position.y
            dx = cx - rx
            dy = cy - ry
            dist = math.sqrt(dx*dx + dy*dy)
            bearing = wrap_angle(atan2(dy,dx) - self.robot.pose.rotation.angle_z.radians) * 180/pi
            print('wall at (%5.1f,%5.1f)  robot at (%5.1f,%5.1f)  dist=%5.1f  brg=%5.1f' %
                  (cx, cy, rx, ry, dist, bearing))


    class TurnToWall(Turn):
        def __init__(self):
            super().__init__()

        def start(self, event=None):
            if self.running: return
            cube = self.parent.object
            door_id = self.parent.door_id
            if door_id not in self.robot.world.aruco.seen_marker_ids:
                print('** TurnToWall could not see the Door.')
                self.angle = Angle(degrees=0)
                super().start(event)
                self.post_failure()
            else:
                while True:
                    rx = self.robot.pose.position.x
                    ry = self.robot.pose.position.y
                    rt = self.robot.pose.rotation.angle_z.radians

                    marker = self.robot.world.aruco.seen_marker_objects.get(door_id,0)
                    if marker!=0:
                        break

                sensor_dist = marker.camera_distance
                sensor_bearing = atan2(marker.camera_coords[0],
                                       marker.camera_coords[2])
                sensor_orient = - marker.opencv_rotation[1] * (pi/180)

                direction = rt + sensor_bearing
                dx = sensor_dist * cos(direction)
                dy = sensor_dist * sin(direction)
                cx = rx + dx
                cy = ry + dy
                dist = math.sqrt(dx*dx + dy*dy)
                self.angle = wrap_angle(atan2(dy,dx) - self.robot.pose.rotation.angle_z.radians) \
                             * 180/pi
                if abs(self.angle) < 2:
                    self.angle = 0
                self.angle = Angle(degrees=self.angle)
                print("TurnToWall", self.angle)
                super().start(event)


    class ForwardToWall(Forward):
        def __init__(self, offset):
            self.offset = offset
            super().__init__()

        def start(self, event=None):
            if self.running: return
            door_id = self.parent.door_id
            rx = self.robot.pose.position.x
            ry = self.robot.pose.position.y
            rt = self.robot.pose.rotation.angle_z.radians

            marker = self.robot.world.aruco.seen_marker_objects[door_id]
            sensor_dist = marker.camera_distance
            sensor_bearing = atan2(marker.camera_coords[0],
                                   marker.camera_coords[2])
            sensor_orient = - marker.opencv_rotation[1] * (pi/180)

            direction = rt + sensor_bearing
            dx = sensor_dist * cos(direction)
            dy = sensor_dist * sin(direction)
            cx = rx + dx
            cy = ry + dy
            dist = math.sqrt(dx*dx + dy*dy)
            self.distance = Distance(sqrt(dx*dx + dy*dy) - self.offset)
            super().start(event)


    class FindWall(SetHeadAngle):
        def __init__(self):
            super().__init__()

        def start(self, event=None):
            if self.running: return
            door_id = self.parent.door_id
            if door_id not in self.robot.world.aruco.seen_marker_ids:
                print('Looking higher for wall')
                if self.robot.head_angle.degrees < 30:
                    self.angle = Angle(self.robot.head_angle.radians + 0.4)
                    super().start(event)
                else:
                    self.angle = self.robot.head_angle
                    super().start(event)
            else:
                self.angle = self.robot.head_angle
                super().start(event)


    $setup{
        droplift: SetLiftHeight(0) =T(0.5)=> check_start    # time for vision to set up world map

        check_start: PilotCheckStart()
        check_start =S=> SetHeadAngle(0) =T(2)=> turn_to_side
        check_start =F=> Forward(-80) =C=> check_start

        turn_to_side: self.TurnToSide()
        turn_to_side =C=> turn_to_side
        turn_to_side =S=> self.ReportPosition() =N=> go_side

        go_side: self.GoToSide() =C=> self.TurnToSide() =C=> lookup

        lookup:  SetHeadAngle(25) =T(2)=> find

        find: self.TurnToWall() =C=>
            self.ReportPosition() =T(0.75)=> approach
        find =F=> Forward(-80) =C=> StateNode() =T(1)=> find2

        find2: self.TurnToWall() =C=>
            self.ReportPosition() =T(0.75)=> approach
        find2 =F=> Forward(-80) =C=> Say("No Door trying again") =C=> turn_to_side

        approach: self.ForwardToWall(150) =C=> self.FindWall() =C=>
            self.ReportPosition() =T(0.75)=>
            self.TurnToWall() =C=> self.FindWall() =C=>
            self.ForwardToWall(100) =C=> self.FindWall() =C=>
            self.ReportPosition() =T(0.75)=>
            self.TurnToWall() =C=> self.FindWall() =C=>
            self.ForwardToWall(60) =C=> self.FindWall() =C=>
            self.ReportPosition() =T(0.75)=>
            self.TurnToWall()=C=> end


        end: SetHeadAngle(0) =C=> Forward(100) =C=> Say("Done") =C=> ParentCompletes()
    }
