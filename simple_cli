#!/usr/bin/python3 -i
"""

Simple Cozmo CLI
================
A simple (and crude) Command Line Interface for Cozmo.

Available commands:

    (python code)
        Executable statements are directly passed to python's interpreter.
        The magic global variables ans holds the results of evaluating the
        last expression.
        
    exit    
        Quit the CLI; return to Python.

    monitor(robot[, Event])
        Monitor all event types in the dispatch table, or a specified type of Event
    
    unmonitor(robot[, Event])
        Turn off monitoring

    runfsm(module_name)
        Imports or reloads a state machine module and runs the
        state machine.

    tracefsm(trace_level)
        Sets the FSM tracing level (0-9). With no argument, returns
        the current level.

    tm message
        Sends 'message' as a text message to the currently running
        state machine.

    show active
        Shows active state nodes and transitions.

    show cam_viewer | path_viewer | worldmap_viewer
        Displays OpenCV viewer of the specified type.

    !cmd
        Runs 'cmd' in a shell and prints the result.
*********

Author:     David S. Touretzky, Carnegie Mellon University
=======

"""

# All that stuff we really need in order to get going.
import atexit 
import code
import datetime
import logging
import os
import platform
import re
import readline 
import rlcompleter 
import subprocess
import sys
import time
import traceback
from importlib import __import__, reload

try:
    from termcolor import cprint
except:
    def cprint(string,color=None):
        print(string)

import cozmo
from cozmo.util import *

from event_monitor import monitor, unmonitor

import cozmo_fsm
from cozmo_fsm import *

# tab completion
readline.parse_and_bind('tab: complete') 
# history file
if 'HOME' in os.environ:  # Linux
    histfile = os.path.join(os.environ['HOME'], '.pythonhistory')
elif 'USERPROFILE' in os.path.environ:  # Windows
    histfile = os.path.join(os.environ['USERPROFILE'], '.pythonhistory')
else:
    histfile = '.pythonhistory'

try: 
    readline.read_history_file(histfile) 
except IOError: 
    pass 
atexit.register(readline.write_history_file, histfile) 
del rlcompleter

os_version = platform.system()
del platform

# Put current directory on search path.
if '.' not in sys.path:
    sys.path.append('.')

res = 0
ans = None

RUNNING = True

running_fsm = None

def runfsm(module_name, running_modules=dict()):
    """runfsm('modname') reloads that module and expects it to contain
    a class of the same name. It calls that class's constructor and then
    calls the instance's start() method."""
    global running_fsm

    if running_fsm:
        robot.stop_all_motors()
        running_fsm.stop()

    r_py = re.compile('.*\.py$')
    if r_py.match(module_name):
        print("\n'%s' is not a module name. Trying '%s' instead.\n" %
              (module_name, module_name[0:-3]))
        module_name = module_name[0:-3]

    found = False
    try:
        reload(running_modules[module_name])
        found = True
    except KeyError: pass
    except: raise
    if not found:
        try:
            running_modules[module_name] = __import__(module_name)
        except ImportError:
            print("Could not find module '%s'. Check your search path.\n" %
                  module_name)
            return
        except: raise

    py_filepath = running_modules[module_name].__file__
    fsm_filepath = py_filepath[0:-2] + 'fsm'
    try:
        py_time = datetime.datetime.fromtimestamp(os.path.getmtime(py_filepath))
        fsm_time = datetime.datetime.fromtimestamp(os.path.getmtime(fsm_filepath))
        if py_time < fsm_time:
            cprint('Warning: %s.py is older than %s.fsm. Should you run genfsm?' %
                   (module_name,module_name), color="yellow")
    except: pass

    # The parent node class's constructor must match the module name.
    the_module = running_modules[module_name]
    the_class = the_module.__getattribute__(module_name) \
                if module_name in dir(the_module) else None
    if not isinstance(the_class,type) or not issubclass(the_class,StateNode):
        cprint("Module %s does not contain a StateNode class named %s.\n" %
              (module_name, module_name), color="red")
        return       
    the_module.robot = robot
    the_module.world = robot.world
    the_module.charger = robot.world.charger
    the_module.cube1 = robot.world.light_cubes[cozmo.objects.LightCube1Id]
    the_module.cube2 = robot.world.light_cubes[cozmo.objects.LightCube2Id]
    the_module.cube3 = robot.world.light_cubes[cozmo.objects.LightCube3Id]
    # Class's __init__ method will call setup, which can reference the above variables.
    running_fsm = the_class()
    robot.loop.call_soon(running_fsm.start)
    return running_fsm

def text_message(msg):
    if not running_fsm or not running_fsm.running:
        print('No state machine running. Use runfsm(module_name) to start a state machine.')
        return
    try:
        running_fsm.robot.erouter.post(TextMsgEvent(msg))
    except KeyboardInterrupt: raise
    except Exception as e:
        traceback.print_exc()
        print()

def show_stuff(spec):
    global running_fsm
    if spec == 'active':
        if not running_fsm:
            print('No state machine present.')
        elif not running_fsm.running:
            print("State machine '%s' is not running." % running_fsm.name)
        else:
            show_active(running_fsm,0)
    elif spec == 'cam_viewer' or spec=='viewer':
        if running_fsm:
            running_fsm.stop()
        running_fsm = StateMachineProgram(cam_viewer=True).set_name("CamViewer").now()
    elif spec == "particle_viewer":
        if not robot.world.particle_viewer:
            robot.world.particle_viewer = ParticleViewer(robot)
            robot.world.particle_viewer.start()
    elif spec == "path_viewer":
        if not robot.world.path_viewer:
            robot.world.path_viewer = PathViewer(world.rrt)
            robot.world.path_viewer.start()
    elif spec == "worldmap_viewer":
        if not robot.world.worldmap_viewer:
            robot.world.worldmap_viewer = WorldMapViewer(robot)
            robot.world.worldmap_viewer.start()
    else:
        print("""Invalid option. Try one of:
  show active
  show viewer
  show worldmap_viewer
  show particle_viewer
  show path_viewer
  """)

def show_active(node,depth):
    if node.running: print('  '*depth, node)
    for child in node.children.values():
        show_active(child, depth+1)
    for trans in node.transitions:
        if trans.running: print('  '*(depth+1), trans)

def do_shell_command(cmd):
    try:
        subprocess.call(cmd, shell=True)
    except Exception as e:
        print(e)

def run(sdk_conn):
    global robot
    robot = sdk_conn.wait_for_robot()
    if "TK_VIEWER" in sys.argv:
        time.sleep(1.5) # allow time for Tk to set up the viewer window
    try:
        robot.erouter = cozmo_fsm.evbase.EventRouter()
        robot.erouter.robot = robot
        cozmo_fsm.evbase.robot_for_loading = robot
    except: pass
    cli_loop(robot)

def cli_loop(robot):
    global ans, RUNNING, running_fsm
    cli_loop.charger_warned = False

    cli_globals = globals()
    cli_globals['world'] = robot.world
    cli_globals['light_cubes'] = world.light_cubes
    cli_globals['cube1'] = light_cubes[cozmo.objects.LightCube1Id]
    cli_globals['cube2'] = light_cubes[cozmo.objects.LightCube2Id]
    cli_globals['cube3'] = light_cubes[cozmo.objects.LightCube3Id]
    cli_globals['charger'] = robot.world.charger
    cli_globals['ans'] = None

    running_fsm = StateMachineProgram(cam_viewer=False)
    running_fsm.start()

    cli_loop._console = code.InteractiveConsole()
    while True:
        if RUNNING == False:
            return
        cli_loop._line = ''
        while cli_loop._line == '':
            if robot.is_on_charger:
                if not cli_loop.charger_warned:
                    print("** On charger. Type robot.drive_off_charger_contacts() to enable motion.\n")
                    cli_loop.charger_warned = True
            else:
                cli_loop.charger_warned = False
            readline.write_history_file(histfile)
            try:
                if os_version == 'Darwin':   # Tkinter breaks console on Macs
                    print('C> ', end='')
                    cli_loop._line = sys.stdin.readline().strip()
                else:
                    cli_loop._line = cli_loop._console.raw_input('C> ').strip()
            except KeyboardInterrupt:
                process_interrupt()
                continue
            except EOFError:
                print("EOF.\nType 'exit' to exit.\n")
                continue
            try:
                robot.kine.get_pose()
            except: pass
        if cli_loop._line[0] == '!':
            do_shell_command(cli_loop._line[1:])
            continue
        if cli_loop._line[0:3] == 'tm ' or cli_loop._line == 'tm':
            text_message(cli_loop._line[3:])
            continue
        elif cli_loop._line[0:5] == 'show ' or cli_loop._line == 'show':
            show_stuff(cli_loop._line[5:])
            continue
        cli_loop._do_await = False
        if cli_loop._line[0:7] == 'import ' or cli_loop._line[0:5] == 'from '  or \
               cli_loop._line[0:7] == 'global ' or cli_loop._line[0:4] == 'del '   or \
               cli_loop._line[0:4] == 'for ' or \
               cli_loop._line[0:4] == 'def '    or cli_loop._line[0:6] == 'async ' :
            # Can't use assignment to capture a return value, so None.
            ans = None
        elif cli_loop._line[0:6] == 'await ':
            cli_loop._do_await = True
            cli_loop._line = 'ans=' + cli_loop._line[6:]
        elif cli_loop._line[0:5] == 'exit':
            # Clean up
            try:
                world_viewer.exited = True
            except: pass
            if running_fsm:
                running_fsm.stop()
            RUNNING=False
        else:
            cli_loop._line = 'ans=' + cli_loop._line
        try:
            exec(cli_loop._line, cli_globals)
            if cli_loop._do_await:
                print("Can't use await outside of an async def.")
                ans = None # ans = await ans
            if not ans is None:
                print(ans,end='\n\n')
        except KeyboardInterrupt:
            print('Keyboard interrupt!')
        except Exception:
            traceback.print_exc()
            print()

VERBOSE = False  # True if we want all the log messages

def suppress_filter(log_record):
    message = log_record.msg if isinstance(log_record.msg, str) else repr(log_record.msg)
    if VERBOSE:
        return True
    if log_record.levelno == logging.ERROR and \
       message.startswith("Received a custom object type:"):
        return False
    if message.startswith("Defined: ") and \
       len(log_record.args) > 0 and \
           isinstance(log_record.args[0], cozmo.objects.CustomObject):
        return False
    if message.startswith("Invalidating pose for") or \
       message.startswith("Robot delocalized") or \
       message.startswith("ObjectPowerLevel event") or \
       message.startswith("ObjectConnectionState event") or \
       message.startswith("Object connected") or \
       message.startswith("Object disconnected"):
        return False
    return True

logging_is_setup = False

# Hack to detect SDK version mismatch error
class CozmoConnection_Hack(cozmo.conn.CozmoConnection):
    def abort(self,exc):
        cozmo.conn.saved_exception = exc
        self.old_abort(exc)

def start_connection():
    global logging_is_setup, VERBOSE
    if not logging_is_setup:
        cozmo.setup_basic_logging()
        logging_is_setup = True
    if "VERBOSE" in sys.argv:
        VERBOSE = True
    cozmo.logger.addFilter(suppress_filter)
    cozmo.robot.Robot.drive_off_charger_on_connect = False
    connection_error = None

    # Replace Anki's CozmoConnection.abort method with our own
    cozmo.conn.saved_exception = None
    cozmo.conn.CozmoConnection.old_abort = cozmo.conn.CozmoConnection.abort
    cozmo.conn.CozmoConnection.abort = CozmoConnection_Hack.abort

    try:
        if len(sys.argv) >= 2:
            if sys.argv[1] == "TK_VIEWER":
                cozmo.connect_with_tkviewer(run)
            else:
                print("\nUnrecognized argument '%s'. Use TK_VIEWER instead.\n" % sys.argv[1])
                cozmo.connect(run)
        else:
            cozmo.connect(run)
    except cozmo.ConnectionError as e:
        exc = cozmo.conn.saved_exception
        if isinstance(exc, cozmo.exceptions.SDKVersionMismatch):
            print('\n\n***** SDK version mismatch:',exc,'\n\n')
        connection_error = e
    if connection_error is not None:
        sys.exit("A connection error occurred: %s" % connection_error)


def process_interrupt():
    robot.stop_all_motors()
    if running_fsm and running_fsm.running:
        print('\nKeyboardInterrupt: stopping', running_fsm.name)
        running_fsm.stop()
    else:
        print("\nKeyboardInterrupt. Type 'exit' to exit.")

if __name__ == '__main__':
    start_connection()
